<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git github ssh | Tidbits]]></title>
  <link href="http://ecerruti.github.io/blog/categories/git-github-ssh/atom.xml" rel="self"/>
  <link href="http://ecerruti.github.io/"/>
  <updated>2013-09-06T09:03:48-07:00</updated>
  <id>http://ecerruti.github.io/</id>
  <author>
    <name><![CDATA[Edward Cerruti]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GitHub with Multiple Accounts]]></title>
    <link href="http://ecerruti.github.io/blog/2013/08/03/github-with-multiple-accounts/"/>
    <updated>2013-08-03T11:03:00-07:00</updated>
    <id>http://ecerruti.github.io/blog/2013/08/03/github-with-multiple-accounts</id>
    <content type="html"><![CDATA[<p>When you need to work with more than one account on GitHub you&rsquo;ll need to get a little creative. This situation usually arises when you want to keep your personal account separate from your work account. The process is fairly straightforward and involves exercising SSH.</p>

<p>So, given that your existing SSH keys are your personal ones we&rsquo;ll make the second set for work.</p>

<h2>Create a New SSH Key</h2>

<p>Create a new SSH key to use for the work account</p>

<blockquote><ul>
<li>You can also use <code>-t dsa</code>, if you do, replace all references to <code>rsa</code> with <code>dsa</code>.</li>
<li>Be careful <strong>NOT</strong> to overwrite your existing SSH key. Give this new key a unique name, e.g. <code>~/.ssh/id_rsa_WORK</code>.</li>
</ul>
</blockquote>

<p><code>
$ ssh-keygen -t rsa -C "your-email-address"
</code></p>

<p>Add a new SSH key entry to your GitHub account by copying and pasting the contents of <code>~/.ssh/id_rsa_WORK.pub</code> into the SSH key field of your account.</p>

<p>If you are running an authentication agent you will need to add this new SSH key to it.</p>

<p><code>
$ ssh-add ~/.ssh/id_rsa_WORK
</code></p>

<h2>Edit the SSH Config File</h2>

<p>If you do not already have the file <code>~/.ssh/config</code> create it and add something similar to the following</p>

<p>```</p>

<h1>Personal</h1>

<p>Host github.com
  HostName github.com
  User git
  IdentityFile ~/.ssh/id_rsa</p>

<h1>Work</h1>

<p>Host github-WORK
  HostName github.com
  User git
  IdentityFile ~/.ssh/id_rsa_WORK
```</p>

<h2>Sample Usage</h2>

<p>In a nutshell, use the <code>Host</code> entry in your SSH commands instead of the actual host and SSH will use the correct information. For example, the following will use the new identity key.</p>

<p><code>
$ git clone git@github-WORK:&lt;account&gt;/&lt;repo&gt;.git
</code></p>
]]></content>
  </entry>
  
</feed>
